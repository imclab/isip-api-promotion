// Generated by CoffeeScript 1.4.0
(function() {
  var _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.JST || (window.JST = {});

  window.JST['species_index'] = _.template("<h1>Species</h1>\n<ul>\n  <%\n    var i, il, speciesModel;\n    for(i = 0, il=speciesModels.length; i<il; i++){\n      speciesModel = speciesModels[i];\n  %>\n    <%= view.addSubView(new Backbone.Views.SpeciesRowView({model: speciesModel})) %>\n  <%\n    }\n  %>\n</ul>");

  window.Backbone || (window.Backbone = {});

  (_base = window.Backbone).Views || (_base.Views = {});

  Backbone.Views.SpeciesIndexView = (function(_super) {

    __extends(SpeciesIndexView, _super);

    function SpeciesIndexView() {
      this.render = __bind(this.render, this);
      return SpeciesIndexView.__super__.constructor.apply(this, arguments);
    }

    SpeciesIndexView.prototype.template = JST['species_index'];

    SpeciesIndexView.prototype.initialize = function(options) {
      this.speciesList = new Backbone.Collections.SpeciesCollection();
      this.listenTo(this.speciesList, 'sync', this.render);
      this.speciesList.fetch();
      return this.render();
    };

    SpeciesIndexView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        view: this,
        speciesModels: this.speciesList.models
      }));
      this.renderSubViews();
      return this;
    };

    SpeciesIndexView.prototype.onClose = function() {
      this.closeSubViews();
      return this.stopListening(this.speciesList, 'sync', this.render);
    };

    return SpeciesIndexView;

  })(Backbone.Diorama.NestingView);

  (_base1 = window.Backbone).Models || (_base1.Models = {});

  window.Backbone.Models.Species = (function(_super) {

    __extends(Species, _super);

    function Species() {
      return Species.__super__.constructor.apply(this, arguments);
    }

    return Species;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base2 = window.Backbone).Collections || (_base2.Collections = {});

  Backbone.Collections.SpeciesCollection = (function(_super) {

    __extends(SpeciesCollection, _super);

    function SpeciesCollection() {
      return SpeciesCollection.__super__.constructor.apply(this, arguments);
    }

    SpeciesCollection.prototype.model = Backbone.Models.Species;

    SpeciesCollection.prototype.url = "data/species.json";

    SpeciesCollection.prototype.parse = function(data) {
      return data[0].animalia.concat(data[0].animalia);
    };

    return SpeciesCollection;

  })(Backbone.Collection);

  window.JST || (window.JST = {});

  window.JST['species_row'] = _.template("<%= model.get('id') %>: <%= model.get('species_name') %>");

  window.Backbone || (window.Backbone = {});

  (_base3 = window.Backbone).Views || (_base3.Views = {});

  Backbone.Views.SpeciesRowView = (function(_super) {

    __extends(SpeciesRowView, _super);

    function SpeciesRowView() {
      this.render = __bind(this.render, this);
      return SpeciesRowView.__super__.constructor.apply(this, arguments);
    }

    SpeciesRowView.prototype.tagName = 'li';

    SpeciesRowView.prototype.template = JST['species_row'];

    SpeciesRowView.prototype.initialize = function(options) {
      this.model = options.model;
      return this.render();
    };

    SpeciesRowView.prototype.render = function() {
      return this.$el.html(this.template({
        model: this.model
      }));
    };

    SpeciesRowView.prototype.onClose = function() {};

    return SpeciesRowView;

  })(Backbone.View);

  (_base4 = window.Backbone).Models || (_base4.Models = {});

  window.Backbone.Models.Change = (function(_super) {

    __extends(Change, _super);

    function Change() {
      return Change.__super__.constructor.apply(this, arguments);
    }

    return Change;

  })(Backbone.Model);

  window.Backbone || (window.Backbone = {});

  (_base5 = window.Backbone).Collections || (_base5.Collections = {});

  Backbone.Collections.ChangeCollection = (function(_super) {

    __extends(ChangeCollection, _super);

    function ChangeCollection() {
      return ChangeCollection.__super__.constructor.apply(this, arguments);
    }

    ChangeCollection.prototype.model = Backbone.Models.Change;

    ChangeCollection.prototype.url = "data/species.json";

    ChangeCollection.prototype.parse = function(data) {
      return data[0].animalia.concat(data[0].animalia);
    };

    return ChangeCollection;

  })(Backbone.Collection);

  window.JST || (window.JST = {});

  window.JST['changes_index'] = _.template("<h1>Changes</h1>\n<ul id=\"change-list\">\n  <%\n    var i, il, changeModel;\n    for(i = 0, il=changeModels.length; i<il; i++){\n      changeModel = changeModels[i];\n  %>\n    <%= view.addSubView(new Backbone.Views.ChangeRowView({model: changeModel})) %>\n  <%\n    }\n  %>\n</ul>");

  window.Backbone || (window.Backbone = {});

  (_base6 = window.Backbone).Views || (_base6.Views = {});

  Backbone.Views.ChangesIndexView = (function(_super) {

    __extends(ChangesIndexView, _super);

    function ChangesIndexView() {
      this.render = __bind(this.render, this);
      return ChangesIndexView.__super__.constructor.apply(this, arguments);
    }

    ChangesIndexView.prototype.template = JST['changes_index'];

    ChangesIndexView.prototype.initialize = function(options) {
      this.changeList = new Backbone.Collections.ChangeCollection();
      this.listenTo(this.changeList, 'sync', this.render);
      this.changeList.fetch();
      return this.render();
    };

    ChangesIndexView.prototype.render = function() {
      this.closeSubViews();
      this.$el.html(this.template({
        view: this,
        changeModels: this.changeList.models
      }));
      this.renderSubViews();
      return this;
    };

    ChangesIndexView.prototype.onClose = function() {
      return this.closeSubViews();
    };

    return ChangesIndexView;

  })(Backbone.Diorama.NestingView);

  window.JST || (window.JST = {});

  window.JST['changes_row'] = _.template("<%= model.get('species_name') %><button>Apply</button>");

  window.Backbone || (window.Backbone = {});

  (_base7 = window.Backbone).Views || (_base7.Views = {});

  Backbone.Views.ChangeRowView = (function(_super) {

    __extends(ChangeRowView, _super);

    function ChangeRowView() {
      this.render = __bind(this.render, this);
      return ChangeRowView.__super__.constructor.apply(this, arguments);
    }

    ChangeRowView.prototype.tagName = 'li';

    ChangeRowView.prototype.template = JST['changes_row'];

    ChangeRowView.prototype.events = {
      "click button": "applyChange"
    };

    ChangeRowView.prototype.initialize = function(options) {
      this.model = options.model;
      return this.render();
    };

    ChangeRowView.prototype.render = function() {
      return this.$el.html(this.template({
        model: this.model
      }));
    };

    ChangeRowView.prototype.applyChange = function() {
      return alert("if this worked, you would have applied change " + (this.model.get('id')));
    };

    ChangeRowView.prototype.onClose = function() {};

    return ChangeRowView;

  })(Backbone.View);

}).call(this);
